version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: destroy_environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # SUCCESS=$(curl --insecure  https://kvdb.io/14Nhuw817u1kTPGV59nzeY/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # if (( $SUCCESS == 1 ));
            cd ~/project/backend
            npm install
            npm run migrations:revert
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build


  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build


  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: test front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test


  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: test back-end
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test


  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: scan front-end for vulnerabilities
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit --audit-level=critical


  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: scan back-end for vulnerabilities
  #         command: |
  #           cd backend
  #           npm install
  #           npm install --save-dev webpack@5.73.0
  #           npm update mkdirp --depth 6
  #           npm update path-parse --depth 3
  #           npm update kind-of --depth 14
  #           npm audit fix --audit-level=critical --force
  #           npm audit --audit-level=critical


  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum install -y tar gzip
  #     - run:
  #         name: create backend infrastructure
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/backend.yml \
  #           --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #           --tags project="udapeople${CIRCLE_WORKFLOW_ID:0:7}"
  #     - run:
  #         name: create frontend infrastructure
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/frontend.yml \
  #           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #           --tags project=udapeople
  #     - run:
  #         name: Add the EC2 instance IP to the Ansible inventory
  #         command: |
  #           echo "[web]" > ~/project/.circleci/ansible/inventory.txt
  #           echo $(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters "Name=tag:project,Values=udapeople${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text) >> ~/project/.circleci/ansible/inventory.txt
  #           cat ~/project/.circleci/ansible/inventory.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     - destroy_environment

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["3f:4f:b0:b6:67:95:cb:48:4c:66:c3:a0:f3:bc:08:4c"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip ansible
  #           python -m pip install awscli
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml
  #     - destroy_environment
  
  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt-get update -y && sudo apt-get install -y python3 \
  #           python3-pip python3-setuptools groff less -y && sudo pip3 install --upgrade pip \
  #           && sudo apt-get clean && sudo apt-get install curl
  #     - run:
  #         name: Install awscli
  #         command: |
  #           pip3 --no-cache-dir install --upgrade awscli
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #           cat migrations_dump.txt
  #     # - run:
  #     #     name: Send migration results to kvdb
  #     #     command: |
  #     #       if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #     #       then
  #     #         curl https://kvdb.io/14Nhuw817u1kTPGV59nzeY/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #     #       fi
  #     - destroy_environment
  #     - revert-migrations

  # deploy-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt-get update -y && sudo apt-get install -y python3 \
  #           python3-pip python3-setuptools groff less -y && sudo pip3 install --upgrade pip \
  #           && sudo apt-get clean && sudo apt-get install curl
  #     - run:
  #         name: Update packages
  #         command: |
  #           sudo apt-get update
  #     - run:
  #         name: Install awscli
  #         command: |
  #           pip3 --no-cache-dir install --upgrade awscli
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters "Name=tag:project,Values=udapeople${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo API_URL="${API_URL}" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy_environment
  #     - revert-migrations

  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - add_ssh_keys:
  #         fingerprints: ["3f:4f:b0:b6:67:95:cb:48:4c:66:c3:a0:f3:bc:08:4c"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache nodejs npm tar gzip ansible
  #     - run:
  #         name: Install awscli
  #         command: |
  #           pip3 --no-cache-dir install --upgrade awscli
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
  #           mv artifact.tar.gz .circleci/ansible/roles/deploy/files/
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy_environment
  #     - revert-migrations

  # smoke-test:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update nodejs npm curl
  #     - run:
  #         name: Install awscli
  #         command: |
  #           pip3 --no-cache-dir install --upgrade awscli
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters "Name=tag:project,Values=udapeople${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           if curl "${API_URL}/api/status" | grep "ok"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
  #           echo ${URL}
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy_environment
  #     - revert-migrations

  # cloudfront-update:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update nodejs npm curl
  #     - run:
  #         name: Install awscli
  #         command: |
  #           pip3 --no-cache-dir install --upgrade awscli
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation list-exports \
  #           --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           echo $OldWorkflowID >> ~/OldWorkflowID.txt
  #           cat ~/OldWorkflowID.txt
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name InitialStack \
  #           --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
  #           --tags project=udapeople
  #     - destroy_environment
  #     - revert-migrations

  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
      - run:
          name: Install awscli
          command: |
            pip3 --no-cache-dir install --upgrade awscli
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack names: "${STACKS[@]}"
            # remove old stacks and files
            # if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            # then
            #   echo "------------ Delete confirmed --------------"
            #   aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            #   aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            # else
            #   echo "------------ Cannot cleanup stacks --------------"
            # fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend
      # - deploy-infrastructure:
      #     requires:
      #       - test-frontend
      #       - test-backend
      #       - scan-frontend
      #       - scan-backend
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - configure-infrastructure:
      #     requires: 
      #       - deploy-infrastructure
      # - run-migrations:
      #     requires: 
      #       - configure-infrastructure
      # - deploy-frontend:
      #     requires: 
      #       - run-migrations
      # - deploy-backend:
      #     requires: 
      #       - run-migrations
      # - smoke-test:
      #     requires:
      #       - deploy-backend
      #       - deploy-frontend
      # - cloudfront-update:
      #     requires:
      #       - smoke-test
      - cleanup
          # requires:
          #   - cloudfront-update